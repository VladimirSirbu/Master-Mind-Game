package com.mastermind;

import java.util.Arrays;

public class Row {

    /**
     * An {@code array} that represent a list of colors for this {@code Row} instance
     */
    protected Color[] positions;

    /**
     * Number of correct colors that correspond to its correct position in the row
     */
    protected int matchedPositions;

    /**
     * Number of correct colors from row, but in their not correct position
     */
    protected int matchedColors;

    /**
     * {@code none} represents an empty object with all field with {@code null} state or zero
     */
    public static final Row none = new Row();

    public Row() {}

    /**
     * Initialize fields of {@code Row} object
     * @param newGuess - array of {@code Color} that entered user or generated by another method
     */
    public Row(Color[] newGuess){
        this.positions = Arrays.copyOf(newGuess, newGuess.length); // make a copy to keep original array unchanged
        this.matchedColors = 0;
        this.matchedPositions = 0;
    }

    /**
     * Set the number of {@code matchedPositions} and {@code matchedColors} from the row
     * @param matchedPositions - number of correct colors that correspond to its correct position in the row
     * @param matchedColors - number of correct colors from row, but in their not correct position
     */
    public void setMatch(int matchedPositions, int matchedColors) {
        if (matchedColors + matchedPositions > positions.length) //
            throw new IllegalArgumentException("Number of matches can not be more that the position.");
        this.matchedColors = matchedColors;
        this.matchedPositions = matchedPositions;
    }

    public int nrMatchingColors(Color[] guess) {
        int count = 0;
        for (int i = 0; i < guess.length; i++)
            for (int j = 0; j < positions.length; j++)
                if (i != j && guess[i].equals(positions[j]))
                    count++;
        return count;
    }

    public int nrMatchingPositions(Color[] guess) {
        int count = 0;
        for (int i = 0; i < guess.length; i++) {
            if (guess[i].equals(positions[i])) {
                count++;
            }
        }
        return count;
    }

    public void printScore() {
        System.out.println(matchedColors + " / " + matchedPositions);
    }
}
